<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.nbcompany.dao.BizCourseDao">

    <resultMap id="BaseResultMap" type="org.example.nbcompany.entity.BizCourse">
        <id property="id" column="id" />
        <result property="courseName" column="course_name" />
        <result property="coverImageUrl" column="cover_image_url" />
        <result property="summary" column="summary" />
        <result property="courseVideoUrl" column="course_video_url" />
        <result property="sortOrder" column="sort_order" />
        <result property="authorId" column="author_id" />
        <result property="authorName" column="author_name" />
        <result property="companyId" column="company_id" />
        <result property="status" column="status" />
        <result property="viewCount" column="view_count" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
    </resultMap>

    <sql id="Base_Column_List">
        id, course_name, cover_image_url, summary, course_video_url, sort_order, author_id, author_name, company_id, status, view_count, created_at, updated_at
    </sql>

    <select id="findById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM biz_course WHERE id = #{id}
    </select>

    <select id="findByCourseName" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM biz_course WHERE courseName = #{courseName}
    </select>

    <select id="findAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" /> FROM biz_course ORDER BY sort_order ASC, id DESC
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO biz_course
        (course_name, cover_image_url, summary, course_video_url, sort_order, author_id, author_name, company_id, status, view_count, created_at, updated_at)
        VALUES
            (#{courseName},#{coverImageUrl},#{summary},#{courseVideoUrl},#{sortOrder},#{authorId},#{authorName},#{companyId},#{status},#{viewCount},#{createdAt},#{updatedAt})
    </insert>

    <update id="update">
        UPDATE biz_course
        <set>
            <if test="courseName != null">course_name = #{courseName},</if>
            <if test="coverImageUrl != null">cover_image_url = #{coverImageUrl},</if>
            <if test="summary != null">summary = #{summary},</if>
            <if test="courseVideoUrl != null">course_video_url = #{courseVideoUrl},</if>
            <if test="sortOrder != null">sort_order = #{sortOrder},</if>
            <if test="authorId != null">author_id = #{authorId},</if>
            <if test="authorName != null">author_name = #{authorName},</if>
            <if test="status != null">status = #{status},</if>
            updated_at = NOW()
        </set>
        WHERE id = #{id}
    </update>

    <update id="incrementViewCount">
        UPDATE biz_course SET view_count = view_count + 1 WHERE id = #{id}
    </update>

    <delete id="deleteById">
        DELETE FROM biz_course WHERE id = #{id}
    </delete>

    <select id="findByQuery" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM biz_course
        <where>
            <if test="query.status != null">
                AND status = #{query.status}
            </if>
            <if test="query.courseName != null and query.courseName != ''">
                AND course_name LIKE CONCAT('%', #{query.courseName}, '%')
            </if>
            <if test="query.authorName != null and query.authorName != ''">
                AND author_name LIKE CONCAT('%', #{query.authorName}, '%')
            </if>
            <if test="query.companyName != null and query.companyName != ''">
                AND company_id IN (
                SELECT id FROM sys_company WHERE company_name LIKE CONCAT('%', #{query.companyName}, '%')
                )
            </if>
            <!-- 你可以继续加其他条件 -->
        </where>
        ORDER BY
        <choose>
            <when test="query.sortBy == 'viewCount'">
                view_count
                <if test="query.sortOrder == 'asc'">ASC</if>
                <if test="query.sortOrder == 'desc'">DESC</if>
            </when>
            <when test="query.sortBy == 'sortOrder'">
                sort_order
                <if test="query.sortOrder == 'asc'">ASC</if>
                <if test="query.sortOrder == 'desc'">DESC</if>
            </when>
            <when test="query.sortBy == 'courseName'">
                course_name
                <if test="query.sortOrder == 'asc'">ASC</if>
                <if test="query.sortOrder == 'desc'">DESC</if>
            </when>
            <otherwise>
                sort_order ASC, created_at DESC
            </otherwise>
        </choose>
    </select>

</mapper>